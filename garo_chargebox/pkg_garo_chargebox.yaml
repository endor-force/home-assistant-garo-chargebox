### GARO EV Charger package.
###
### 1. Load in configuration.yaml as a package under homeassistant.
### 2. Update max charge limit on the input_number slider if you have other max current than 16A set in your box.
###
### *** example ***
###
###     homeassistant:
###         packages:
###             garo_chargebox: !include garo_chargebox/pkg_garo_chargebox.yaml
###
### ***


### Mother sensor where raw measurements are imported and stored in to attributes.
sensor:
  - platform: rest
    name: Laddbox
    resource: http://192.168.xxx.xxx:8080/servlet/rest/chargebox/status
    json_attributes:
        - mode
        - currentLimit
        - powerMode
        - latestReading
        - currentTemperature
        - mainCharger
        - switchCurrentLimit
    value_template: '{{ value_json.connector }}'


### Rest commands for turning on and off / making charging available and setting chargelimit.
rest_command:
    chargebox_chargelimit:
        url: 'http://192.168.xxx.xxx:8080/servlet/rest/chargebox/currentlimit'
        method: post
        content_type: 'application/json'
        payload: '{"reducedIntervalsEnabled": "{{ enabled }}","reducedCurrentIntervals": [{"chargeLimit": "{{ chargelimit }}"}]}'

    chargebox_off:
        url: 'http://192.168.xxx.xxx:8080/servlet/rest/chargebox/mode/ALWAYS_OFF'
        method: post

    chargebox_on:
        url: 'http://192.168.xxx.xxx:8080/servlet/rest/chargebox/mode/ALWAYS_ON'
        method: post

    chargebox_schema:
        url: 'http://192.168.xxx.xxx:8080/servlet/rest/chargebox/mode/SCHEMA'
        method: post


### Input selector dropdown
input_select:
  chargebox_mode:
    name: Laddbox läge
    options:
      - "På"
      - "Schema"
      - "Av"
    icon: mdi:power-settings

### Input slider for chargelimit. Adjust max value if your box has other limits (Check the mother rest sensor value switchCurrentLimit)
input_number:
  chargebox_limit:
    name: 'Laddbox max laddström'
    mode: slider
    min: 6
    max: 16
    icon: mdi:car-speed-limiter
    unit_of_measurement: "A"


### Chargebox automations
### Trigger from input selector dropdown to select mode and run rest command
automation:
  - alias: "Change chargebox mode"
    description: "Change chargebox mode based on dropdown menu selection"
    trigger:
      platform: state
      entity_id: input_select.chargebox_mode
    action:
      service: >
            {# Enumerate and give the chargebox translation texts. #}
            {%-
            set box_mode = {
                'På' : 'chargebox_on',
                'Schema' : 'chargebox_schema',
                'Av' : 'chargebox_off'
            }
            -%}

            {# Get the box status from the dropdown. #}
            {% set mode = states('input_select.chargebox_mode') %}
            rest_command.{{box_mode.get(mode)}}


### Fetch mode from chargebox sensor attribute and ensure dropdown is kept in sync with actual setting.
  - alias: "Update chargebox mode selector"
    trigger:
      platform: state
      entity_id: sensor.laddbox
      attribute: mode
    action:
      service: input_select.select_option
      target:
        entity_id: input_select.chargebox_mode
      data:
        option: >
              {# Enumerate and give the chargebox translation texts. #}
              {%-
              set box_mode = {
                  'ALWAYS_ON' : 'På',
                  'SCHEMA' : 'Schema',
                  'ALWAYS_OFF' : 'Av'
              }
              -%}

              {# Get the box status from the chargebox sensor attribute. #}
              {% set mode = states('input_select.chargebox_mode') %}
              {{box_mode.get(state_attr('sensor.laddbox', 'mode'))}}


### Set chargelimit from input slider
  - alias: "Change chargebox currentlimit"
    description: "Change chargebox currentlimit based on input slider."
    trigger:
      platform: state
      entity_id: input_number.chargebox_limit
    action:
      - service: rest_command.chargebox_chargelimit
        data:
          enabled: "true"
          chargelimit: "{{states('input_number.chargebox_limit') | int }}"


### Fetch actual currentlimit from chargebox and set the chargelimit slider.
  - alias: "Update chargebox limit slider."
    trigger:
      platform: state
      entity_id: sensor.laddbox
      attribute: currentLimit
    action:
      service: input_number.set_value
      target:
        entity_id: input_number.chargebox_limit
      data:
        value: "{{ state_attr('sensor.laddbox', 'currentLimit') }}"


### Templates to convert units and set separate sensors from attributes.
template:
    - sensor:
        - unique_id: 'laddbox_chargingcurrent'
          name: 'Aktuell laddström'
          icon: mdi:lightning-bolt-circle
          unit_of_measurement: 'A'
          state_class: measurement
          state: >
            {% set state = state_attr('sensor.laddbox', 'mainCharger')['currentChargingCurrent'] /1000 | round(1) %}
            {% if state >= 0 %}
            {{state}}
            {% else %}
            0
            {% endif %}

        - unique_id: 'laddbox_chargingpower'
          name: 'Aktuell förbrukning'
          icon: mdi:resistor
          unit_of_measurement: 'kW'
          state_class: measurement
          state: >
            {% set state = state_attr('sensor.laddbox', 'mainCharger')['currentChargingPower'] /1000 | round(1) %}
            {% if state >= 0 %}
            {{state}}
            {% else %}
            0
            {% endif %}

        - unique_id: 'laddbox_sessionenergy'
          name: 'Laddat sedan anslutning'
          icon: mdi:clock-start
          state: '{{ state_attr("sensor.laddbox", "mainCharger")["accSessionEnergy"] /1000 | round(1) }}'
          unit_of_measurement: 'kWh'
          state_class: measurement

        - unique_id: 'laddbox_totalconsumption'
          name: 'Laddbox förbrukning'
          icon: mdi:gauge
          device_class: energy
          state_class: total_increasing
          unit_of_measurement: 'kWh'
          state: >
            {% set state = state_attr('sensor.laddbox', 'latestReading')/1000 | round(1) %}
            {% if state > 0 %}
              {{state}}
            {% endif %}

        - unique_id: 'laddbox_temp'
          name: 'Laddbox temp'
          icon: mdi:thermometer
          state: '{{ state_attr("sensor.laddbox", "currentTemperature") }}'
          unit_of_measurement: '°C'
          state_class: measurement

        - unique_id: 'laddbox_chargerstatus'
          name: 'Laddbox status'
          state: >
            {# Enumerate and give the chargebox translation texts. #}
            {%-
            set box_status = {
                'CHARGING_FINISHED' : 'Klar',
                'CHARGING_CANCELLED' : 'Avbruten',
                'CHARGING_PAUSED' : 'Pausad av lastbalanserare',
                'NOT_CONNECTED' : 'Ej ansluten',
                'CONNECTED' : 'Ansluten',
                'SEARCH_COMM' : 'Ansluten - söker',
                'CHARGING' : 'Laddar',
                'RCD_FAULT' : 'Skyddsbrytare utlöst',
                'OVERHEAT' : 'Överhettad, begränsad',
                'CRITICAL_TEMPERATURE' : 'Kritisk temperatur',
                'INITIALIZATION' : 'Initierar',
                'CABLE_FAULT' : 'Kabelfel',
                'LOCK_FAULT' : 'Låsfel',
                'CONTACTOR_FAULT' : 'Kontaktorfel',
                'VENT_FAULT' : 'Ventileringsfel',
                'DC_ERROR' : 'DC-fel',
                'DISABLED' : 'Inaktiverad',
                'UNAVAILABLE' : 'Laddning pausad (Master)',
                'REMOTE_DISABLED' : 'Externt deaktiverad',
                'DC_HARDWARE' : 'DC hårdvarufel',
                'CP_FAULT' : 'Kommunikationsfel (CP-signal)',
                'CP_SHORTED' : 'Kommunikationsfel (CP-kortsluten)'
            }
            -%}

            {# Get the box status from the attribute connector #}
            {% set status = state_attr('sensor.laddbox','mainCharger')['connector'] %}

            {#- Check if the status is translated and return the translated text.
            If a translation is not found then status text will be raw status text. -#}
            {% if box_status.get(status) %}
            {{box_status.get(status)}}
            {% else %}
            {{status}}
            {% endif %}

### Setting up meters for total consumption over time.
utility_meter:
    laddning_bil_manad:
      source: sensor.total_forbrukning
      cycle: monthly

    laddning_bil_daglig:
      source: sensor.total_forbrukning
      cycle: daily
